spring.application.name=springMybatis

mybatis.mapper-locations=classpath:mappers/*xml
mybatis.type-aliases-package=com.example.springmybatis.mybatis.entity

mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
mybatis.configuration.local-cache-scope=session
mybatis.configuration.cache-enabled=true
logging.level.com.example.springmybatis.mapper=debug

# 开启shardingjdbc的sql执行日志打印
spring.shardingsphere.props.sql.show=true

server.port=8080

#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.name=mydb
#spring.datasource.url=jdbc:mysql://localhost:3306/mydb?serverTimezone=UTC
#spring.datasource.username=root
#spring.datasource.password=root123

# 不是所有的表都需要做拆分的！！！ 如何实现部分表做了拆分，有些表没有做拆分的判断查询？

# 之前使用spring.datesource进行数据源的管理，集成shardingsphere后，数据源交予spring.shardingsphere.datasource管理
# 注意sharding5.x 和  4.x版本配置属性有些地方不一样，spring.shardingsphere.datasource.xxx.url  在4.x版本是xxx.url   在5.x版本是xxx.jdbc-url
# 数据源名称可以随便填写，相当于一个别名
spring.shardingsphere.datasource.names=ds0,ds1
# ds0
spring.shardingsphere.datasource.ds0.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0.url=jdbc:mysql://127.0.0.1:3306/mydb?useUnicode=yes&characterEncoding=UTF-8&useSSL=false&serverTimezone=UTC
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=root123
# ds1
spring.shardingsphere.datasource.ds1.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1.url=jdbc:mysql://127.0.0.1:3306/mydb02?useUnicode=yes&characterEncoding=UTF-8&useSSL=false&serverTimezone=UTC
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=root123

# 默认分片策略（分片策略包含分片键 和 分片算法两个部分） inline使用行分片策略只支持 = 和 in操作符
# sharding的分片策略一共有五种  标准分片策略、复合分片策略、行内表达式分片策略（默认）、Hint分片策略、不分片策略
# 分片键
#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=age
## 分片算法  表达式
#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds${age % 2}

# 默认数据源，用于不做分片的表查询固定使用
spring.shardingsphere.sharding.default-data-source-name=ds0

spring.shardingsphere.sharding.tables.t_user.database-strategy.standard.sharding-column=age
# 使用范围算法前提 必须精确算法和范围算法一起用 否则报错
spring.shardingsphere.sharding.tables.t_user.database-strategy.standard.range-algorithm-class-name=com.example.springmybatis.configuration.MyDBRangeShardingAlgorithm
spring.shardingsphere.sharding.tables.t_user.database-strategy.standard.precise-algorithm-class-name=com.example.springmybatis.configuration.MyDBPreciseShardingAlgorithm


# 分库算法 t_user 多库分表
# 单库内没有分表
#spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=ds$->{0..1}.t_user
#spring.shardingsphere.sharding.tables.t_user.databaseStrategy.inline.shardingColumn=age
#spring.shardingsphere.sharding.tables.t_user.databaseStrategy.inline.algorithm-expression=ds${age % 2}
#spring.shardingsphere.sharding.tables.t_user.key-generator.column=age
#spring.shardingsphere.sharding.tables.t_user.key-generator.type=SNOWFLAKE


spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=ds$->{0..1}.t_user
spring.shardingsphere.sharding.tables.t_user.key-generator.column=age
spring.shardingsphere.sharding.tables.t_user.key-generator.type=SNOWFLAKE